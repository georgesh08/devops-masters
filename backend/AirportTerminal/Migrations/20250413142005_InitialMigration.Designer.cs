// <auto-generated />
using System;
using AirportTerminal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AirportTerminal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250413142005_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AirportTerminal.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ArrivalDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartureAirport")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationAirport")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AircraftModel = "Boeing 737-800",
                            Airline = "Аэрофлот",
                            ArrivalDateTime = new DateTime(2025, 4, 13, 14, 0, 0, 0, DateTimeKind.Utc),
                            DepartureAirport = "Москва (SVO)",
                            DepartureDateTime = new DateTime(2025, 4, 13, 12, 30, 0, 0, DateTimeKind.Utc),
                            DestinationAirport = "Санкт-Петербург (LED)",
                            FlightNumber = "SU1234"
                        },
                        new
                        {
                            Id = 2,
                            AircraftModel = "Airbus A320",
                            Airline = "S7",
                            ArrivalDateTime = new DateTime(2025, 4, 13, 3, 50, 0, 0, DateTimeKind.Utc),
                            DepartureAirport = "Москва (SVO)",
                            DepartureDateTime = new DateTime(2025, 4, 11, 0, 15, 0, 0, DateTimeKind.Utc),
                            DestinationAirport = "Сочи (AER)",
                            FlightNumber = "S71234"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
